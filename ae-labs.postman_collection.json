{
	"info": {
		"_postman_id": "abe5452d-3a75-4895-ad69-292cfb64b54c",
		"name": "ae-labs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/account",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/account",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"account"
					]
				}
			},
			"response": []
		},
		{
			"name": "/build",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"sender\": \"ak_2H8Wqi8jvF33QJF1AVKVCbmt2ZMkEa3FNtE8iVd5EctRZ3VGDN\",\n\t\"receiver\": \"ak_JeCacn51hekpG5md5ssMcSa2zuM9xkifAzioKiDDLFu2aULsF\",\n\t\"amount\": 1000,\n\t\"payload\": \"ba_aGVsbG+Vlcnf\"\n}"
				},
				"url": {
					"raw": "localhost:3000/build",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"build"
					]
				}
			},
			"response": []
		},
		{
			"name": "/sign",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"rawTx\" : \"tx_+FgMAaEBqFH64qZfJCthAKP4qNulJBLJLJ3C2wUjfd8k3j/3lGShASgOkL3NPSsKay+TBFpL9fMLt8pQbegzLfapoAmxcSUdggPohg9HjghAAAABhWhlbGxvn6WgCQ==\",\n\t\"secretKey\" : \"68bbc4ae1f60510f71ad099d864aa338032cdd98482a787d100c010e6934a1b7a851fae2a65f242b6100a3f8a8dba52412c92c9dc2db05237ddf24de3ff79464\",\n\t\"publicKey\" : \"ak_2H8Wqi8jvF33QJF1AVKVCbmt2ZMkEa3FNtE8iVd5EctRZ3VGDN\"\n}"
				},
				"url": {
					"raw": "localhost:3000/sign",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"sign"
					]
				}
			},
			"response": []
		},
		{
			"name": "/decode",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"tx\" : \"tx_+KILAfhCuEAnTkqZimwwF3AZdAVIunJkD944XNWHG+kxTis3Q0qF0NauYvCjTsIeELQM53gMa1rBEeLZtMNiyZQXi7YuGSgPuFr4WAwBoQGoUfripl8kK2EAo/io26UkEsksncLbBSN93yTeP/eUZKEBKA6Qvc09KwprL5MEWkv18wu3ylBt6DMt9qmgCbFxJR2CA+iGD0eOCEAAAAGFaGVsbG8YiD5x\"\n}"
				},
				"url": {
					"raw": "localhost:3000/decode",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"decode"
					]
				}
			},
			"response": []
		},
		{
			"name": "/spend",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"signedTx\" : \"tx_+KILAfhCuEAnTkqZimwwF3AZdAVIunJkD944XNWHG+kxTis3Q0qF0NauYvCjTsIeELQM53gMa1rBEeLZtMNiyZQXi7YuGSgPuFr4WAwBoQGoUfripl8kK2EAo/io26UkEsksncLbBSN93yTeP/eUZKEBKA6Qvc09KwprL5MEWkv18wu3ylBt6DMt9qmgCbFxJR2CA+iGD0eOCEAAAAGFaGVsbG8YiD5x\",\n\t\"secretKey\" : \"68bbc4ae1f60510f71ad099d864aa338032cdd98482a787d100c010e6934a1b7a851fae2a65f242b6100a3f8a8dba52412c92c9dc2db05237ddf24de3ff79464\",\n\t\"publicKey\" : \"ak_2H8Wqi8jvF33QJF1AVKVCbmt2ZMkEa3FNtE8iVd5EctRZ3VGDN\"\n}"
				},
				"url": {
					"raw": "localhost:3000/spend",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"spend"
					]
				}
			},
			"response": []
		},
		{
			"name": "/compile",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"code\" : \"contract CryptoHamster =\\n   datatype event = NewHamster(indexed int, string, hash)\\n\\n   record state = { hamsters : map(string, hash), next_id : int }\\n\\n   stateful entrypoint init() = { hamsters = {}, next_id = 0 }\\n\\n   entrypoint nameExists(name: string) : bool =\\n      Map.member(name, state.hamsters)\\n\\n   stateful entrypoint createHamster(hamsterName: string) =\\n      require(!nameExists(hamsterName), \\\"Name is already taken\\\")\\n      createHamsterByNameDNA(hamsterName, generateDNA(hamsterName))\\n   \\n   entrypoint getHamsterDNA(hamsterName: string) : hash =\\n      require(nameExists(hamsterName), \\\"Hamster does not exist!\\\")\\n      state.hamsters[hamsterName]\\n\\n   stateful function createHamsterByNameDNA(name: string, dna: hash) =\\n      put(state{hamsters[name] = dna, next_id = (state.next_id + 1)})\\n      Chain.event(NewHamster(state.next_id, name, dna))\\n \\n   function generateDNA(name : string) : hash =\\n      String.sha3(name)\",\n\t\"keypair\" : {\n\t\t\"secretKey\" : \"68bbc4ae1f60510f71ad099d864aa338032cdd98482a787d100c010e6934a1b7a851fae2a65f242b6100a3f8a8dba52412c92c9dc2db05237ddf24de3ff79464\",\n\t\t\"publicKey\" : \"ak_2H8Wqi8jvF33QJF1AVKVCbmt2ZMkEa3FNtE8iVd5EctRZ3VGDN\"\t\n\t}\n\t\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/compile",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"compile"
					]
				}
			},
			"response": []
		},
		{
			"name": "/deploy",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"code\" : \"contract CryptoHamster =\\n   datatype event = NewHamster(indexed int, string, hash)\\n\\n   record state = { hamsters : map(string, hash), next_id : int }\\n\\n   stateful entrypoint init() = { hamsters = {}, next_id = 0 }\\n\\n   entrypoint nameExists(name: string) : bool =\\n      Map.member(name, state.hamsters)\\n\\n   stateful entrypoint createHamster(hamsterName: string) =\\n      require(!nameExists(hamsterName), \\\"Name is already taken\\\")\\n      createHamsterByNameDNA(hamsterName, generateDNA(hamsterName))\\n   \\n   entrypoint getHamsterDNA(hamsterName: string) : hash =\\n      require(nameExists(hamsterName), \\\"Hamster does not exist!\\\")\\n      state.hamsters[hamsterName]\\n\\n   stateful function createHamsterByNameDNA(name: string, dna: hash) =\\n      put(state{hamsters[name] = dna, next_id = (state.next_id + 1)})\\n      Chain.event(NewHamster(state.next_id, name, dna))\\n \\n   function generateDNA(name : string) : hash =\\n      String.sha3(name)\",\n\t\"keypair\" : {\n\t\t\"secretKey\" : \"68bbc4ae1f60510f71ad099d864aa338032cdd98482a787d100c010e6934a1b7a851fae2a65f242b6100a3f8a8dba52412c92c9dc2db05237ddf24de3ff79464\",\n\t\t\"publicKey\" : \"ak_2H8Wqi8jvF33QJF1AVKVCbmt2ZMkEa3FNtE8iVd5EctRZ3VGDN\"\t\n\t}\n\t\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/deploy",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"deploy"
					]
				}
			},
			"response": []
		},
		{
			"name": "/methods",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"code\" : \"contract CryptoHamster =\\n   datatype event = NewHamster(indexed int, string, hash)\\n\\n   record state = { hamsters : map(string, hash), next_id : int }\\n\\n   stateful entrypoint init() = { hamsters = {}, next_id = 0 }\\n\\n   entrypoint nameExists(name: string) : bool =\\n      Map.member(name, state.hamsters)\\n\\n   stateful entrypoint createHamster(hamsterName: string) =\\n      require(!nameExists(hamsterName), \\\"Name is already taken\\\")\\n      createHamsterByNameDNA(hamsterName, generateDNA(hamsterName))\\n   \\n   entrypoint getHamsterDNA(hamsterName: string) : hash =\\n      require(nameExists(hamsterName), \\\"Hamster does not exist!\\\")\\n      state.hamsters[hamsterName]\\n\\n   stateful function createHamsterByNameDNA(name: string, dna: hash) =\\n      put(state{hamsters[name] = dna, next_id = (state.next_id + 1)})\\n      Chain.event(NewHamster(state.next_id, name, dna))\\n \\n   function generateDNA(name : string) : hash =\\n      String.sha3(name)\",\n\t\"keypair\" : {\n\t\t\"secretKey\" : \"68bbc4ae1f60510f71ad099d864aa338032cdd98482a787d100c010e6934a1b7a851fae2a65f242b6100a3f8a8dba52412c92c9dc2db05237ddf24de3ff79464\",\n\t\t\"publicKey\" : \"ak_2H8Wqi8jvF33QJF1AVKVCbmt2ZMkEa3FNtE8iVd5EctRZ3VGDN\"\t\n\t},\n\t\"contractAddress\" : \"ct_xEXztJLhSJZNYLZB7eketiAGKntR2w6eUiFjZXDgqHPTdCFQz\"\n\t\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/methods",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"methods"
					]
				}
			},
			"response": []
		},
		{
			"name": "/call",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"code\" : \"contract CryptoHamster =\\n   datatype event = NewHamster(indexed int, string, hash)\\n\\n   record state = { hamsters : map(string, hash), next_id : int }\\n\\n   stateful entrypoint init() = { hamsters = {}, next_id = 0 }\\n\\n   entrypoint nameExists(name: string) : bool =\\n      Map.member(name, state.hamsters)\\n\\n   stateful entrypoint createHamster(hamsterName: string) =\\n      require(!nameExists(hamsterName), \\\"Name is already taken\\\")\\n      createHamsterByNameDNA(hamsterName, generateDNA(hamsterName))\\n   \\n   entrypoint getHamsterDNA(hamsterName: string) : hash =\\n      require(nameExists(hamsterName), \\\"Hamster does not exist!\\\")\\n      state.hamsters[hamsterName]\\n\\n   stateful function createHamsterByNameDNA(name: string, dna: hash) =\\n      put(state{hamsters[name] = dna, next_id = (state.next_id + 1)})\\n      Chain.event(NewHamster(state.next_id, name, dna))\\n \\n   function generateDNA(name : string) : hash =\\n      String.sha3(name)\",\n\t\"keypair\" : {\n\t\t\"secretKey\" : \"68bbc4ae1f60510f71ad099d864aa338032cdd98482a787d100c010e6934a1b7a851fae2a65f242b6100a3f8a8dba52412c92c9dc2db05237ddf24de3ff79464\",\n\t\t\"publicKey\" : \"ak_2H8Wqi8jvF33QJF1AVKVCbmt2ZMkEa3FNtE8iVd5EctRZ3VGDN\"\t\n\t},\n\t\"fn\" : \"nameExists\",\n\t\"contractAddress\" : \"ct_xEXztJLhSJZNYLZB7eketiAGKntR2w6eUiFjZXDgqHPTdCFQz\",\n\t\"args\" : [\"ham001\"]\n\t\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/call",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"call"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}